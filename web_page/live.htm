<!DOCTYPE html>
<html>
	<head>
	  <title>Live Electric Data</title>
	  <link rel="shortcut icon" href="http://live-penn-flagship.pantheon.io/sites/default/files/favicon.ico">
	  <link rel="stylesheet" type="text/css" href="/ep_style.css">
	  <style>
			table.mtr_data {
				font-family: Arial, Helvetica, sans-serif;
				max-width: 100%;
				min-width: 30em;
				border-collapse: collapse;
				table-layout: fixed;
			}

			table.mtr_data td, table.mtr_data th {
				font-size: 1em;
				border: 1px solid black;
				padding: 3px 7px 2px 7px;
				text-align: center;
			}
			
			table.mtr_data td:first-child {
				text-align: left;
			}

			table.mtr_data th {
				font-size: 1.1em;
				text-align: center;
				padding-top: 5px;
				padding-bottom: 4px;
				background-color: #a90523;
				color: #ffffff;
			}

			table.mtr_data tr.alt td {
				color: #000000;
				background-color: #FDC8D1;
			}
			
			table.mtr_data tr.typ td {
				color: #000000;
				background-color: #FFFFFF;
			}
	  </style>
	  <script>
			var selSlv = 0;
			var utility = "";
			var elecClasses = ["curr", "v_LN", "rl_p", "rc_p", "ap_p", "p_fc", "engy", "v_LL"];
			var chwClasses = ["flow", "tmp1", "tmp2", "dlta", "engy"];
			var stmClasses = ["flow", "tmp1", "pres", "engy"];
			
			var txtArray = ["",
							"Eaton IQ DP 4000", "Eaton PXM 2260", "Eaton IQ 200", "Eaton IQ 300", "Eaton Power Xpert 4000",
							"Emon Dmon 3400",
							"GE EPM 3720", "GE EPM 5100", "GE PQM",
							"Schneider PM5300", "Schneider PM8000",
							"Siemens 9200", "Siemens 9330", "Siemens 9340", "Siemens 9350", "Siemens 9360", "Siemens 9510", "Siemens 9610", "Siemens 9700", "Siemens Sentron PAC 4200", "Siemens Sentron PAC 3200",
							"SquareD CM 2350", "SquareD PM 210", "SquareD PM 710", "SquareD Micrologic A Trip Unit", "SquareD Micrologic P Trip Unit", "SquareD Micrologic H Trip Unit", "SquareD CM 3350", "SquareD CM 4000", "SquareD CM 4250", "SquareD PM 800", "SquareD PM 820", "SquareD PM 850", "SquareD PM 870",
							"Chilled Water KEP", "Steam KEP"];
			var valArray = ["0.0.0", 
							"0.1.1", "15.1.0", "0.1.3", "0.1.4", "1.1.0", 
							"2.1.0", 
							"3.1.0", "0.2.1", "4.1.0", 
							"16.1.0", "17.1.0",
							"0.3.1", "5.1.0", "10.8.0", "5.2.0", "5.3.0", "6.1.0", "6.2.0", "5.4.0", "14.1.0", "14.2.0",
							"7.1.0", "13.1.0", "8.1.0", "9.1.0", "9.2.0", "9.3.0", "10.1.0", "10.2.0", "10.3.0", "10.4.0", "10.5.0", "10.6.0", "10.7.0",
							"11.1.0", "12.1.0"];
								
			function isNumeric(num) {
				return !isNaN(num);
			}
			function wSpc(length) {
				return Array(length + 1).join(String.fromCharCode(160));
			}
			
			function concatDropdown(ipStr, idStr, vidStr, typeStr) {
				var cctStr = " ";
				var ipMaxLen = 15;
				var idMaxLen = 9;
				var vidMaxLen = 10;
				var typeMaxLen = 30;
				
				cctStr += wSpc(ipMaxLen - ipStr.length);
				cctStr += ipStr;
				
				cctStr += wSpc(1) + "|" + wSpc(1);
				
				cctStr += wSpc(idMaxLen - idStr.length);
				cctStr += idStr;
				
				cctStr += wSpc(1) + "|" + wSpc(1);
				
				cctStr += wSpc(vidMaxLen - vidStr.length);
				cctStr += vidStr;
				
				cctStr += wSpc(1) + "|" + wSpc(1);
				
				cctStr += wSpc(typeMaxLen - typeStr.length);
				cctStr += typeStr;
				
				return cctStr;
			}
			
			function getDisplayInfo(){
				var slvSelect = document.getElementById('slave');
				var option = document.createElement("option");
				option.disabled = true;
				option.text = concatDropdown("IP", "Modbus Id", "Modbus vId", "Meter Type");
				slvSelect.appendChild(option);

				//drawChwTable();
				//drawStmTable();
				//drawElecTable();
				
				nocache = "&nocache=" + Math.random() * 1000000;
				var request = new XMLHttpRequest();
				request.onreadystatechange = function(){
					
					if (this.readyState == 4) {
						if (this.status == 200) {
							if (this.responseXML != null) {
								var xmlDoc = this.responseXML;
						
								var pageUrl = window.location.href;
								var urlIndex = pageUrl.indexOf("METER=");
								
								if (urlIndex < 0) {
									selSlv = 0;
								}
								else {
									urlIndex += 6;
									var urlIndexStop = urlIndex + 3;
									
									for (; urlIndex < urlIndexStop; ++urlIndex) {
										if (isNumeric(pageUrl[urlIndex])) {
											selSlv = selSlv * 10 + parseInt(pageUrl[urlIndex]);
										}
										else {
											break;
										}
									}
								}
								
								var totSlvs = xmlDoc.getElementsByTagName('meter').length;
								if ((selSlv >= totSlvs) || (selSlv < 0)) {
									selSlv = 0;
								}
								
								for (var ii = 0; ii < totSlvs; ++ii){
									var ipStr = "Serial Comms";
									var idStr = "err";
									var vidStr = "err";
									var typeStr = "err";
									var option = document.createElement("option");
									option.value = ii;
									
									if (xmlDoc.getElementsByTagName("mip")[ii].childNodes.length > 0){
										ipStr =  xmlDoc.getElementsByTagName("mip")[ii].childNodes[0].nodeValue;
									}
									
									if (xmlDoc.getElementsByTagName("dev")[ii].childNodes.length > 0){
										idStr = xmlDoc.getElementsByTagName("dev")[ii].childNodes[0].nodeValue;
									}
									
									if (xmlDoc.getElementsByTagName("vid")[ii].childNodes.length > 0){
										vidStr = xmlDoc.getElementsByTagName("vid")[ii].childNodes[0].nodeValue;
									}
									
									if (xmlDoc.getElementsByTagName("type")[ii].childNodes.length > 0){
										var mtrTyp = xmlDoc.getElementsByTagName("type")[ii].childNodes[0].nodeValue;
										
										for (var jj = 0; jj < txtArray.length; jj++){
											if (valArray[jj] == mtrTyp){
												typeStr = txtArray[jj];
												break;
											}
										}
									}
								
									option.text = concatDropdown(ipStr, idStr, vidStr, typeStr);
									slvSelect.appendChild(option);
								}
								
								slvSelect.selectedIndex = selSlv + 1;  // plus one to account for header
								
								// draw tables
								if (xmlDoc.getElementsByTagName("type")[selSlv].childNodes[0].nodeValue == "11.1.0") {
									drawChwTable();
									utility = "chw";
								}
								else if (xmlDoc.getElementsByTagName("type")[selSlv].childNodes[0].nodeValue == "12.1.0") {
									drawStmTable();
									utility = "stm";
								}
								else {
									drawElecTable();
									utility = "elec";
								}
							}
						}
					}
				}

				request.open("GET", "info.xml" + nocache, true);
				request.send(null);
			}
			
			function getMeterData(){	
				var nocache = "&METER=" + selSlv + "&nocache=" + Math.random() * 1000000;
				
				var request = new XMLHttpRequest();
				request.onreadystatechange = function(){
					
					if (this.readyState == 4) {
						if (this.status == 200) {
							if (this.responseXML != null) {
								if (this.responseXML.getElementsByTagName('has_data')[0].childNodes[0].nodeValue == "true"){
									var d = new Date();
									document.getElementById("last_update").innerHTML = d.toLocaleString();
									document.getElementById("update_txt").innerHTML = "Successful retrieval!";
									
									var numXmlElmts;
									var totNumClass = 0;
									var classArr;
									
									if (utility == "chw") {
										totNumClass = 5;
										classArr = chwClasses;
									}
									else if (utility == "stm") {
										totNumClass = 4;
										classArr = stmClasses;
									}
									else {
										totNumClass = 8;
										classArr = elecClasses;
									}
									
									for (var curClass = 0; curClass < totNumClass; curClass++){
										numXmlElmts = this.responseXML.getElementsByTagName(classArr[curClass]).length;
										
										for (var curElmt = 0; curElmt < numXmlElmts; curElmt++){
											document.getElementsByClassName(classArr[curClass])[curElmt].innerHTML = 
												this.responseXML.getElementsByTagName(classArr[curClass])[curElmt].childNodes[0].nodeValue;
										}
									}	
								}
								else{
									document.getElementById("update_txt").innerHTML = "Data could not be retrieved."
								}
							}
							else{
								document.getElementById("update_txt").innerHTML = "Data could not be retrieved."
							}
						}
						else{
							document.getElementById("update_txt").innerHTML = "Data could not be retrieved."
						}
					}
					else if (this.readyState == 0){
						document.getElementById("update_txt").innerHTML = "Data could not be retrieved."
					}
					else {
						document.getElementById("update_txt").innerHTML = "Please wait..."
					}
				}
				request.open("GET", "data.xml" + nocache, true);
				request.send(null);
			}
			
			function drawChwTable() {			 
				var chwTable = [["",    ["th", "width:11em;", "", "Chilled Water"],   ["th", "", "", "Values"]], 
												["typ", ["td", "", "", "Heat Flow (tons)"],           ["td", "", "flow", ""]],
												["alt", ["td", "", "", "Mass Flow (lbs/m)"],          ["td", "", "flow", ""]],
												["typ", ["td", "", "", "Volumetric Flow (gpm)"],      ["td", "", "flow", ""]],
												["alt", ["td", "", "", "Supply Temperature (F)"],     ["td", "", "tmp1", ""]],
												["typ", ["td", "", "", "Return Temperature (F)"],     ["td", "", "tmp2", ""]],
												["alt", ["td", "", "", "Delta Temperature (F)"],      ["td", "", "dlta", ""]],
												["typ", ["td", "", "", "Heat Grand Total (ton-hrs)"], ["td", "", "engy", ""]],
												["alt", ["td", "", "", "Mass Grand Total (lbs)"],     ["td", "", "engy", ""]],
												["typ", ["td", "", "", "Volume Grand Total (gal)"],   ["td", "", "engy", ""]]];
												
				addTable("table_div", "mtr_data", "", chwTable);
			}
			

			function drawStmTable() {				
				var stmTable = [["",    ["th", "width:11em;", "", "Steam"],        ["th", "", "", "Values"]], 
												["typ", ["td", "", "", "Heat Flow (kBtu/hr)"],     ["td", "", "flow", ""]],
												["alt", ["td", "", "", "Mass Flow (lb/hr)"],       ["td", "", "flow", ""]],
												["typ", ["td", "", "", "Volumetric Flow (cf/hr)"], ["td", "", "flow", ""]],
												["alt", ["td", "", "", "Temperature (F)"],         ["td", "", "tmp1", ""]],
												["typ", ["td", "", "", "Pressure (psig)"],         ["td", "", "pres", ""]],
												["alt", ["td", "", "", "Heat Grand Total (kBtu)"], ["td", "", "engy", ""]],
												["typ", ["td", "", "", "Mass Grand Total (lbs)"],  ["td", "", "engy", ""]],
												["alt", ["td", "", "", "Volume Grand Total (cf)"], ["td", "", "engy", ""]]];
												 
				addTable("table_div", "mtr_data", "", stmTable);
			}
			
			function drawElecTable() {
				var elecTable1 = [["",    ["th", "width:7em;", "", "Electric"], ["th", "", "", "A"], ["th", "", "", "B"], ["th", "", "", "C"], ["th", "", "", "Average"], ["th", "", "", "Total"]], 
												["typ", ["td", "", "", "Current"],         ["td", "", "curr", ""], ["td", "", "curr", ""], ["td", "", "curr", ""], ["td", "", "curr", ""], ["td", "", "curr", ""]],
												["alt", ["td", "", "", "Voltage L - N"],     ["td", "", "v_LN", ""], ["td", "", "v_LN", ""], ["td", "", "v_LN", ""], ["td", "", "v_LN", ""], ["td", "", "", emDash()]],
												["typ", ["td", "", "", "Real Power"],      ["td", "", "rl_p", ""], ["td", "", "rl_p", ""], ["td", "", "rl_p", ""], ["td", "", "", emDash()], ["td", "", "rl_p", ""]],
												["alt", ["td", "", "", "Reactive Power"],  ["td", "", "rc_p", ""], ["td", "", "rc_p", ""], ["td", "", "rc_p", ""], ["td", "", "", emDash()], ["td", "", "rc_p", ""]],
												["typ", ["td", "", "", "Apparent Power"],  ["td", "", "ap_p", ""], ["td", "", "ap_p", ""], ["td", "", "ap_p", ""], ["td", "", "", emDash()], ["td", "", "ap_p", ""]],
												["alt", ["td", "", "", "Power Factor"],    ["td", "", "p_fc", ""], ["td", "", "p_fc", ""], ["td", "", "p_fc", ""], ["td", "", "", emDash()], ["td", "", "p_fc", ""]],
												["typ", ["td", "", "", "Real Energy"],     ["td", "", "", emDash()], ["td", "", "", emDash()], ["td", "", "", emDash()], ["td", "", "", emDash()], ["td", "", "engy", ""]],
												["alt", ["td", "", "", "Reactive Energy"], ["td", "", "", emDash()], ["td", "", "", emDash()], ["td", "", "", emDash()], ["td", "", "", emDash()], ["td", "", "engy", ""]],
												["typ", ["td", "", "", "Apparent Energy"], ["td", "", "", emDash()], ["td", "", "", emDash()], ["td", "", "", emDash()], ["td", "", "", emDash()], ["td", "", "engy", ""]]];
										
				var elecTable2 = [["",    ["th", "width:7em;", "", ""], ["th", "", "", "A - B"], ["th", "", "", "B - C"], ["th", "", "", "C - A"], ["th", "", "", "Average"], ["th", "", "", "Total"]], 
												["typ", ["td", "", "", "Voltage L - L"],         ["td", "", "v_LL", ""], ["td", "", "v_LL", ""], ["td", "", "v_LL", ""], ["td", "", "v_LL", ""], ["td", "", "", emDash()]]];

				addTable("table_div", "mtr_data", "width:100%;", elecTable1);
				addBreak("table_div");
				addTable("table_div", "mtr_data", "width:100%;", elecTable2);
			}
			
			function addTable(tableDivId, tableClass, tableStyle, tableArray) {
				var tableDiv = document.getElementById(tableDivId);
				var table1 = document.createElement("TABLE");
				var tableNumRws = tableArray.length;
				
				table1.className = tableClass;
				table1.style = tableStyle;
				tableDiv.appendChild(table1);
				
				for (var ii = 0; ii < tableNumRws; ++ii) {
					var tableRow = document.createElement("tr");
					tableRow.className = tableArray[ii][0];
					table1.appendChild(tableRow);
					
					var rowNumCols = tableArray[ii].length; 
					for (var jj = 1; jj < rowNumCols; ++jj) {
						addTableCell(tableRow, tableArray[ii][jj][0], tableArray[ii][jj][1], tableArray[ii][jj][2], tableArray[ii][jj][3]);
					}
				}
			}
			
			function addTableCell(tableRow, elmtType, cellStyle, cellClass, cellHtml) {
				var tableCell = document.createElement(elmtType);
				tableCell.style = cellStyle;
				tableCell.className = cellClass;
				tableCell.innerHTML = cellHtml;
				tableRow.appendChild(tableCell);
			}
			
			function addBreak(divId) {
				var divVar = document.getElementById(divId);
				var brkPt = document.createElement("br");
				
				divVar.appendChild(brkPt);
			}
			
			function emDash() {
				return String.fromCharCode(8212);
			}
		</script>
	</head>


	<!-- Main content -->
	<body onload="getDisplayInfo()">
		<!-- Site navigation menu -->
		<div id="main-wrapper">
			<nav>
				<ul class="navbar">
					<li><a href="/index.htm">Home</a></li>
					<li><a href="/gensetup.htm">General Setup</a></li>
					<li><a href="/mtrsetup.htm">Meter Setup</a></li>
					<li><a id="live" href="/live.htm">Live Data</a></li>
					<li><a href="/pastdown.htm">Download Data</a></li>
					<li><a href="/pastview.htm">Graph Data</a></li>
					<li><a href="/reset.htm">Reset</a></li>
					
					<a id="imglink" href="http://www.upenn.edu/">
						<img style="width:155px;height:43px;border:0;" src="/images/logo_let.gif" alt="Upenn">
					</a>
				</ul>
			</nav>
			<article>
			<!-- Main content -->
				<br/>
				<form method="get">
					<label for="slave">Go to Slave: </label>
					<select id="slave" onchange="this.form.submit()" name="METER" style="font-family: monospace;">
					</select>
				</form>
				
				<br>

				<p style="margin-top: 0em">
					<button onclick="getMeterData()">Get Data</button>
					<span id="update_txt" style="padding-left:2em">Data not yet retrieved.</span>
					<span style="padding-left:2em">Last update: </span>
					<span id="last_update"></span>
				</p>

				<div id="table_div">
				</div>
			</article>		

			<footer>
				<address>
					Updated 9 December 2016 by <a href="mailto:mteter@upenn.edu?Subject=Modbus%20Gateway%20Webpage" target="_top">Matthew J. Teter</a>
					</br>
					<a href="http://www.facilities.upenn.edu/">University of Pennsylvania Facilities & Real Estate</a>
					<br/>
					3101 Walnut Street
					<br/>
					Philadelphia, PA 19104
					<br/>
					<a href="http://www.upenn.edu/computing/security/reporting_copyright.php">Copyright</a>
				</address>
		    </footer>
		</div>
	</body>
</html>